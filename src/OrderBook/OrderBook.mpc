project(*) : boost_base {
  sharedname = OrderBook
  dynamicflags += ORDERBOOK_BUILD_DLL
  includes += $(QUICKFAST_ROOT)/src
  includes += $(QUICKFAST_ROOT)/src/OrderBook
  pch_header = OrderBookPch.h
  pch_source = OrderBookPch.cpp
  Source_Files {
    *.cpp
  }
  Header_Files {
    *.h
  }

  specific(!vc8, vc9) {
    libout = $(QUICKFAST_ROOT)/lib
    libpaths += $(QUICKFAST_ROOT)/lib
  }
  specific(vc8, vc9) {
    Release::libout = $(QUICKFAST_ROOT)/Output/Release
    Debug::libout = $(QUICKFAST_ROOT)/Output/Debug
    Release::libpaths += $(QUICKFAST_ROOT)/Output/Release
    Debug::libpaths += $(QUICKFAST_ROOT)/Output/Debug
  }
  specific(make) {
    // FieldInstructionInteger generates spuriouswarnings based on
    // signed/unsigned template arguments.
    cppflags += -Wtype-limits
  }

  after += QuickFAST
  libs += QuickFAST
}

project(*tests) : boost_unit_test_framework {
  exename = OrderBookTest
  includes += $(QUICKFAST_ROOT)/src
  includes += $(QUICKFAST_ROOT)/src/OrderBook
  includes += $(QUICKFAST_ROOT)/src/OrderBook/Tests
  specific(!vc8, !vc9) {
    libpaths += $(QUICKFAST_ROOT)/lib
    exeout = $(QUICKFAST_ROOT)/bin
  }
  specific(vc8, vc9) {
    Release::exeout = $(QUICKFAST_ROOT)/Output/Release
    Debug::exeout = $(QUICKFAST_ROOT)/Output/Debug
    Release::libpaths += $(QUICKFAST_ROOT)/Output/Release
    Debug::libpaths += $(QUICKFAST_ROOT)/Output/Debug
  }

  libs += QuickFAST OrderBook
  after += OrderBook
  macros += BOOST_TEST_DYN_LINK
  pch_header = OrderBookPch.h
  pch_source = OrderBookPch.cpp
  Source_Files {
    Tests
  }
  Header_Files {
    Tests
  }
}
